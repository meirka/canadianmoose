name: Notify Telegram on new Topic

on:
  discussion_comment:
    types: [created]
  workflow_dispatch: {}   # optional: lets you test manually

permissions:
  discussions: read
  contents: read

jobs:
  send:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/github-script@v7
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // github, context, core, fetch are provided by github-script (Node 20).

            if (context.eventName === 'workflow_dispatch') {
              core.info('Manual run - nothing to do.'); return;
            }
            if (context.payload.action !== 'created') {
              core.info('Not a create action; skipping.'); return;
            }

            const discussionNumber = context.payload.discussion?.number;
            const commentUrl = context.payload.comment?.html_url;
            const commentNodeId = context.payload.comment?.node_id;

            if (!discussionNumber || !commentUrl || !commentNodeId) {
              core.info('Missing discussion/comment info (need number, html_url, node_id); skipping.');
              return;
            }

            // GraphQL: get discussion category + the comment (via node(id:))
            const q = [
              'query($owner:String!, $repo:String!, $number:Int!, $commentId:ID!) {',
              '  repository(owner:$owner, name:$repo) {',
              '    discussion(number:$number) {',
              '      title',
              '      url',
              '      category { name id }',
              '    }',
              '  }',
              '  node(id:$commentId) {',
              '    __typename',
              '    ... on DiscussionComment {',
              '      id',
              '      body',
              '      createdAt',
              '      author { login url }',
              '      replyTo { id }',
              '    }',
              '  }',
              '}'
            ].join('\n');

            const vars = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: discussionNumber,
              commentId: commentNodeId
            };

            const data = await github.graphql(q, vars);
            const disc = data?.repository?.discussion;
            const c = data?.node;

            if (!disc || c?.__typename !== 'DiscussionComment') {
              core.info('Not a discussion comment; skipping.'); return;
            }

            // Only top-level comments in the "Topics" category
            const isTopics = (disc.category?.name || '').toLowerCase() === 'topics';
            const isTopLevel = !(c.replyTo && c.replyTo.id);
            if (!isTopics || !isTopLevel) {
              core.info('Not a top-level comment in Topics; skipping.'); return;
            }

            // Telegram MarkdownV2 escaping (required)
            function escapeMdv2(text) {
              return String(text).replace(/([_*\[\]()~`>#+\-=\|{}.!\\])/g, '\\$1');
            }
              function escapeMdv2Url(url) {
              // Escape parentheses and backslashes inside link URLs
              return String(url).replace(/([()\\])/g, '\\$1');
            }
              
            // Build message
            const body = c.body || '';
            const lines = body.split('\n').map(s => s.trim()).filter(Boolean);
            const firstLine = lines[0] || '(no title)';
            const rest = lines.slice(1).join(' ');
            const excerpt = rest.length > 240 ? rest.slice(0, 237) + '‚Ä¶' : rest;
            
            const line1 = 'üÜï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è:\n ' + escapeMdv2(firstLine);
            const line2 = excerpt ? ('üìù ' + escapeMdv2(excerpt)) : null;
            const line3 = '\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º –∑–¥–µ—Å—å: ' + `[–≤—Å–µ —Ç–µ–º—ã](https://rcmp.cloud/topics/)`;
            const text = [line1, line2, line3].join('\n');            
              
            // Send to Telegram with MarkdownV2
            const resp = await fetch('https://api.telegram.org/bot' + process.env.TG_TOKEN + '/sendMessage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: process.env.TG_CHAT,
              text: text.slice(0, 4096),   // Telegram max length
              parse_mode: 'MarkdownV2',
              disable_web_page_preview: false 
              })
            });
              
            if (!resp.ok) {
              const errTxt = await resp.text();
              core.setFailed('Telegram send failed: ' + resp.status + ' ' + errTxt);
              return;
            }
            core.info('Sent to Telegram ‚úÖ');