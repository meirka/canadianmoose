name: Notify Telegram on new Topic

on:
  discussion_comment:
    types: [created]

permissions:
  discussions: read
  contents: read

jobs:
  send:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // NOTE: github, context, core, and fetch are injected by github-script (Node 20).
            // Do NOT re-declare or require them.

            if (context.payload.action !== 'created') {
              core.info('Not a create action; skipping.');
              return;
            }

            const discussionNumber = context.payload.discussion?.number;
            const commentUrl = context.payload.comment?.html_url;

            if (!discussionNumber || !commentUrl) {
              core.info('Missing discussion/comment info; skipping.');
              return;
            }

            // Pull discussion category and the comment (and whether it's a reply)
            const q = `
              query($owner:String!, $repo:String!, $number:Int!, $url:URI!) {
                repository(owner:$owner, name:$repo) {
                  discussion(number:$number) {
                    title
                    url
                    category { name id }
                  }
                }
                resource(url:$url) {
                  __typename
                  ... on DiscussionComment {
                    id
                    body
                    createdAt
                    author { login url }
                    replyTo { id }   # null => top-level
                  }
                }
              }`;

            const data = await github.graphql(q, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: discussionNumber,
              url: commentUrl
            });

            const disc = data.repository?.discussion;
            const c = data.resource;

            if (!disc || c?.__typename !== 'DiscussionComment') {
              core.info('Not a discussion comment; skipping.');
              return;
            }

            // Only top-level comments in the "Topics" category
            const isTopics = (disc.category?.name || '').toLowerCase() === 'topics';
            const isTopLevel = !c.replyTo;
            if (!isTopics || !isTopLevel) {
              core.info('Not a top-level comment in Topics; skipping.');
              return;
            }

            // Build a concise Telegram message
            const author = c.author?.login ? `@${c.author.login}` : 'Someone';
            const linesRaw = (c.body || '').split('\n').map(s => s.trim()).filter(Boolean);
            const firstLine = linesRaw[0] || '(no title)';
            const rest = linesRaw.slice(1).join(' ');
            const excerpt = rest.length > 240 ? rest.slice(0, 237) + 'â€¦' : rest;

            const text = [
              'ðŸ†• New Topic',
              `â€¢ ${firstLine}`,
              excerpt ? `â€¢ ${excerpt}` : null,
              '',
              `By ${author}`,
              `Open: ${commentUrl}`
            ].filter(Boolean).join('\n');

            // Send to Telegram
            const resp = await fetch(`https://api.telegram.org/bot${process.env.TG_TOKEN}/sendMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: process.env.TG_CHAT,
                text,
                disable_web_page_preview: true
