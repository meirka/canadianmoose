name: Notify Telegram on new Topic

on:
  discussion_comment:
    types: [created]
  workflow_dispatch: {}   # lets you test-run manually

permissions:
  discussions: read
  contents: read

jobs:
  send:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/github-script@v7
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // NOTE: github, context, core, fetch are injected by github-script (Node 20).

            // If this was a manual run (workflow_dispatch), do nothing gracefully.
            if (!context.payload || !context.eventName || (context.eventName === 'workflow_dispatch')) {
              core.info('Manual run - nothing to do.');
              return;
            }

            if (context.payload.action !== 'created') {
              core.info('Not a create action; skipping.');
              return;
            }

            const discussionNumber = context.payload.discussion && context.payload.discussion.number;
            const commentUrl = context.payload.comment && context.payload.comment.html_url;

            if (!discussionNumber || !commentUrl) {
              core.info('Missing discussion/comment info; skipping.');
              return;
            }

            // --- Build GraphQL query strings without backticks (avoid YAML/backtick issues)
            const qLines = [
              'query($owner:String!, $repo:String!, $number:Int!, $url:URI!) {',
              '  repository(owner:$owner, name:$repo) {',
              '    discussion(number:$number) {',
              '      title',
              '      url',
              '      category { name id }',
              '    }',
              '  }',
              '  resource(url:$url) {',
              '    __typename',
              '    ... on DiscussionComment {',
              '      id',
              '      body',
              '      createdAt',
              '      author { login url }',
              '      replyTo { id }',
              '    }',
              '  }',
              '}'
            ];
            const q = qLines.join('\n');

            const vars = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: discussionNumber,
              url: commentUrl
            };

            const data = await github.graphql(q, vars);

            const disc = data && data.repository && data.repository.discussion;
            const c = data && data.resource;

            if (!disc || !c || c.__typename !== 'DiscussionComment') {
              core.info('Not a discussion comment; skipping.');
              return;
            }

            // Only top-level comments in the "Topics" category
            const isTopics = (disc.category && disc.category.name ? disc.category.name : '').toLowerCase() === 'topics';
            const isTopLevel = !(c.replyTo && c.replyTo.id);
            if (!isTopics || !isTopLevel) {
              core.info('Not a top-level comment in Topics; skipping.');
              return;
            }

            // Build concise Telegram message
            const body = c.body || '';
            const linesRaw = body.split('\n').map(s => s.trim()).filter(Boolean);
            const firstLine = linesRaw.length ? linesRaw[0] : '(no title)';
            const restJoined = linesRaw.slice(1).join(' ');
            const excerpt = restJoined.length > 240 ? (restJoined.slice(0, 237) + 'â€¦') : restJoined;

            const author = (c.author && c.author.login) ? ('@' + c.author.login) : 'Someone';

            const msgLines = [
              'ðŸ†• New Topic',
              'â€¢ ' + firstLine,
              excerpt ? ('â€¢ ' + excerpt) : null,
              '',
              'By ' + author,
              'Open: ' + commentUrl
            ].filter(Boolean);

            const text = msgLines.join('\n');

            // Send to Telegram
            const resp = await fetch('https://api.telegram.org/bot' + process.env.TG_TOKEN + '/sendMessage', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                chat_id: process.env.TG_CHAT,
                text: text,
                disable_web_page_preview: true
              })
            });

            if (!resp.ok) {
              const errTxt = await resp.text();
              core.setFailed('Telegram send failed: ' + resp.status + ' ' + errTxt);
              return;
            }

            core.info('Sent to Telegram âœ…');
